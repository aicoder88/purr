/**
 * Province City Data Loader
 * Auto-generated by split-cities-by-province.js
 * Enables lazy loading of city data by province
 */

import type { CityProfileSeed } from '../cities';

export type ProvinceCode = 'ON' | 'BC' | 'QC' | 'NL' | 'NS' | 'AB' | 'MB' | 'SK' | 'NB' | 'PE' | 'NT' | 'YT' | 'NU';

/**
 * Lazy-load city data for a specific province
 * @param provinceCode - Two-letter province code (e.g., 'ON', 'QC')
 * @returns Promise resolving to array of city profiles for that province
 */
export async function loadProvinceCities(
  provinceCode: ProvinceCode
): Promise<CityProfileSeed[]> {
  const loader = provinceLoaders[provinceCode];
  if (!loader) {
    throw new Error(`Unknown province code: ${provinceCode}`);
  }
  return loader();
}

/**
 * Province-specific data loaders (code-split for lazy loading)
 */
const provinceLoaders: Record<ProvinceCode, () => Promise<CityProfileSeed[]>> = {
  ON: () => import('./cities-ON.json').then(m => m.default as CityProfileSeed[]),
  BC: () => import('./cities-BC.json').then(m => m.default as CityProfileSeed[]),
  QC: () => import('./cities-QC.json').then(m => m.default as CityProfileSeed[]),
  NL: () => import('./cities-NL.json').then(m => m.default as CityProfileSeed[]),
  NS: () => import('./cities-NS.json').then(m => m.default as CityProfileSeed[]),
  AB: () => import('./cities-AB.json').then(m => m.default as CityProfileSeed[]),
  MB: () => import('./cities-MB.json').then(m => m.default as CityProfileSeed[]),
  SK: () => import('./cities-SK.json').then(m => m.default as CityProfileSeed[]),
  NB: () => import('./cities-NB.json').then(m => m.default as CityProfileSeed[]),
  PE: () => import('./cities-PE.json').then(m => m.default as CityProfileSeed[]),
  NT: () => import('./cities-NT.json').then(m => m.default as CityProfileSeed[]),
  YT: () => import('./cities-YT.json').then(m => m.default as CityProfileSeed[]),
  NU: () => import('./cities-NU.json').then(m => m.default as CityProfileSeed[]),
};

/**
 * Check if a province code is valid
 */
export function isValidProvinceCode(code: string): code is ProvinceCode {
  return code in provinceLoaders;
}

/**
 * Get all available province codes
 */
export function getAllProvinceCodes(): ProvinceCode[] {
  return Object.keys(provinceLoaders) as ProvinceCode[];
}

/**
 * Province metadata for reference
 * Generated at: 2025-10-28T17:19:26.548Z
 */
export const PROVINCE_METADATA = {
  ON: { cityCount: 67, sizeKB: 55.27 },
  BC: { cityCount: 35, sizeKB: 28.74 },
  QC: { cityCount: 19, sizeKB: 14.47 },
  NL: { cityCount: 14, sizeKB: 11.43 },
  NS: { cityCount: 12, sizeKB: 9.34 },
  AB: { cityCount: 12, sizeKB: 9.66 },
  MB: { cityCount: 10, sizeKB: 8.11 },
  SK: { cityCount: 8, sizeKB: 6.31 },
  NB: { cityCount: 7, sizeKB: 5.70 },
  PE: { cityCount: 5, sizeKB: 4.02 },
  NT: { cityCount: 5, sizeKB: 4.20 },
  YT: { cityCount: 1, sizeKB: 0.88 },
  NU: { cityCount: 1, sizeKB: 0.82 },
} as const;
