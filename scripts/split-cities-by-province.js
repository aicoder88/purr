#!/usr/bin/env node

/**
 * Split City Data by Province for Lazy Loading
 * Splits large city-profile-seeds.json into province-specific files
 * Enables lazy loading and reduces initial bundle size
 */

const fs = require('fs');
const path = require('path');

const INPUT_FILE = path.join(__dirname, '../src/lib/locations/city-profile-seeds.json');
const OUTPUT_DIR = path.join(__dirname, '../src/lib/locations/provinces');

function log(message, type = 'info') {
  const prefix = {
    info: '📍',
    success: '✅',
    warning: '⚠️ ',
    error: '❌'
  }[type];

  console.log(`${prefix} ${message}`);
}

function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    log(`Created directory: ${dir}`);
  }
}

function splitCitiesByProvince() {
  try {
    log('🚀 Starting city data split by province...');

    // Read the main city profiles file
    const cityProfiles = JSON.parse(fs.readFileSync(INPUT_FILE, 'utf8'));
    log(`Loaded ${cityProfiles.length} city profiles from ${path.basename(INPUT_FILE)}`);

    // Ensure output directory exists
    ensureDirectoryExists(OUTPUT_DIR);

    // Group cities by province code
    const citiesByProvince = {};
    const provinceCounts = {};

    for (const city of cityProfiles) {
      const provinceCode = city.provinceCode;

      if (!citiesByProvince[provinceCode]) {
        citiesByProvince[provinceCode] = [];
        provinceCounts[provinceCode] = 0;
      }

      citiesByProvince[provinceCode].push(city);
      provinceCounts[provinceCode]++;
    }

    // Write each province to its own file
    const provinceFiles = [];

    for (const [provinceCode, cities] of Object.entries(citiesByProvince)) {
      const filename = `cities-${provinceCode}.json`;
      const outputPath = path.join(OUTPUT_DIR, filename);

      // Sort cities alphabetically by name
      const sortedCities = cities.sort((a, b) =>
        a.name.localeCompare(b.name, 'en', { sensitivity: 'base' })
      );

      // Write to file
      fs.writeFileSync(outputPath, JSON.stringify(sortedCities, null, 2), 'utf8');

      const fileSize = fs.statSync(outputPath).size;
      const fileSizeKB = (fileSize / 1024).toFixed(2);

      provinceFiles.push({
        provinceCode,
        filename,
        cityCount: cities.length,
        sizeKB: fileSizeKB
      });

      log(`✓ ${provinceCode}: ${cities.length} cities → ${filename} (${fileSizeKB} KB)`, 'success');
    }

    // Create index file for easy province file discovery
    const indexContent = {
      generatedAt: new Date().toISOString(),
      totalCities: cityProfiles.length,
      provinceCount: Object.keys(citiesByProvince).length,
      provinces: provinceFiles.sort((a, b) => b.cityCount - a.cityCount)
    };

    const indexPath = path.join(OUTPUT_DIR, 'index.json');
    fs.writeFileSync(indexPath, JSON.stringify(indexContent, null, 2), 'utf8');
    log(`Created index file: ${path.basename(indexPath)}`, 'success');

    // Generate TypeScript module map
    const tsContent = generateTypeScriptModule(provinceFiles);
    const tsPath = path.join(OUTPUT_DIR, 'province-loader.ts');
    fs.writeFileSync(tsPath, tsContent, 'utf8');
    log(`Created TypeScript loader: ${path.basename(tsPath)}`, 'success');

    // Summary
    console.log('\n' + '='.repeat(60));
    log('📊 Split Summary:', 'success');
    console.log('='.repeat(60));
    log(`Total cities: ${cityProfiles.length}`);
    log(`Province files created: ${Object.keys(citiesByProvince).length}`);
    log(`Output directory: ${OUTPUT_DIR}`);

    // Show top 5 provinces by city count
    console.log('\nTop 5 Provinces by City Count:');
    provinceFiles
      .sort((a, b) => b.cityCount - a.cityCount)
      .slice(0, 5)
      .forEach((p, i) => {
        log(`${i + 1}. ${p.provinceCode}: ${p.cityCount} cities (${p.sizeKB} KB)`);
      });

    console.log('='.repeat(60) + '\n');
    log('🎉 City data split completed successfully!', 'success');

  } catch (error) {
    log(`Fatal error: ${error.message}`, 'error');
    console.error(error);
    process.exit(1);
  }
}

function generateTypeScriptModule(provinceFiles) {
  const imports = provinceFiles
    .map(p => `  ${p.provinceCode}: () => import('./cities-${p.provinceCode}.json').then(m => m.default as CityProfileSeed[]),`)
    .join('\n');

  return `/**
 * Province City Data Loader
 * Auto-generated by split-cities-by-province.js
 * Enables lazy loading of city data by province
 */

import type { CityProfileSeed } from '../cities';

export type ProvinceCode = ${provinceFiles.map(p => `'${p.provinceCode}'`).join(' | ')};

/**
 * Lazy-load city data for a specific province
 * @param provinceCode - Two-letter province code (e.g., 'ON', 'QC')
 * @returns Promise resolving to array of city profiles for that province
 */
export async function loadProvinceCities(
  provinceCode: ProvinceCode
): Promise<CityProfileSeed[]> {
  const loader = provinceLoaders[provinceCode];
  if (!loader) {
    throw new Error(\`Unknown province code: \${provinceCode}\`);
  }
  return loader();
}

/**
 * Province-specific data loaders (code-split for lazy loading)
 */
const provinceLoaders: Record<ProvinceCode, () => Promise<CityProfileSeed[]>> = {
${imports}
};

/**
 * Check if a province code is valid
 */
export function isValidProvinceCode(code: string): code is ProvinceCode {
  return code in provinceLoaders;
}

/**
 * Get all available province codes
 */
export function getAllProvinceCodes(): ProvinceCode[] {
  return Object.keys(provinceLoaders) as ProvinceCode[];
}

/**
 * Province metadata for reference
 * Generated at: ${new Date().toISOString()}
 */
export const PROVINCE_METADATA = {
${provinceFiles.map(p => `  ${p.provinceCode}: { cityCount: ${p.cityCount}, sizeKB: ${p.sizeKB} },`).join('\n')}
} as const;
`;
}

// Run if called directly
if (require.main === module) {
  splitCitiesByProvince();
}

module.exports = splitCitiesByProvince;
